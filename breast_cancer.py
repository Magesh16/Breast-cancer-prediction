# -*- coding: utf-8 -*-
"""Breast-Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oQdqf0e36f4oAMJDYdU3tb273TRFoCPk
"""

import pandas as pd

import warnings
warnings.filterwarnings("ignore")
warnings.simplefilter(action = 'ignore', category= FutureWarning)

x = pd.read_csv('/content/data.csv')
x.head()

x.info()

x.drop(columns={'Unnamed: 32'},inplace=True)

x.info()

"""Converting diagnosis to numeric data"""

from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()
x['diagnosis'] = lb.fit_transform(x['diagnosis'])
x.head()

"""ID column is dropped and save in new variable"""

x_id = pd.DataFrame()
x_id = x['id']
x.drop(columns={'id'}, inplace=True)

"""Check If any imbalanced class label exit"""

from matplotlib import pyplot as plt
plt.figure(figsize=(10,15))
plt.pie([len(x['diagnosis'][x['diagnosis']==0]),len(x['diagnosis'][x['diagnosis']==1])],
         autopct = '%1.1f%%',
         labels = ['Normal', 'Breast cancer'])
plt.title('Class Label Scores')
plt.show()

import seaborn as sb
corr = x.corr()
plt.figure(figsize=(30,20))
sb.heatmap(corr, annot=True)

"""High correalated data list"""

list1= []
for i in range(len(corr)):
    for j in range(i):
        if corr.iloc[i,j] > 0.9:
            list1.append([i,j])
list1

"""Redundant features drop"""

for i in list1:
    if len(x.iloc[:,i[1]]) != 0:
        x.iloc[:,i[1]] = 0
for j in x.columns:
    if x[j].sum() == 0:
        x.drop(columns={j},inplace=True)
x

from sklearn.model_selection import train_test_split
x_train, x_test,y_train,y_test = train_test_split(x.drop(columns={'diagnosis'}),x['diagnosis'],test_size =0.2, random_state=32)
x_train.shape, x_test.shape,y_train.shape,y_test.shape

"""Scaling process"""

from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()
x_train_rb = scaler.fit_transform(x_train)
x_test_rb = scaler.fit_transform(x_test)

"""Logistic Regression"""

from sklearn.linear_model import LogisticRegression
model_lr = LogisticRegression()
scores = cross_val_score(model_lr,x_train_rb,y_train,cv=10)
scores, scores.mean()

model_lr.fit(x_train_rb,y_train)
pred_test = model_lr.predict(x_test_rb)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test.values, pred_test)

print("Accuracy of the model is :%",round(accuracy,2))

